#!/usr/bin/python

"""Test for keystone pause and resume actions."""

import subprocess
import time
import yaml

from charmhelpers.contrib.openstack.amulet.deployment import (
    OpenStackAmuletDeployment
)


class PauseResume(OpenStackAmuletDeployment):

    KEYSTONE_SERVICES = ("keystone", "apache2", "haproxy")

    def __init__(self, series=None, openstack=None,
                 source=None, stable=False):
        """Deploy the entire test environment."""
        super(PauseResume, self).__init__(series, openstack, source, stable)

        # Deploy only keystone
        self._add_services()
        self._configure_services()
        self._deploy()

    def is_keystone_running(self, unit):
        """Return whether services on the keystone unit are running."""
        running = []
        for service in self.KEYSTONE_SERVICES:
            _, code = unit.run(
                "service {} status | grep -q running".format(service))
            running.append(code == 0)
        return all(running)

    def get_service_overrides(self, unit):
        """
        Return a dict mapping service names to a boolean indicating whether
        an override file exists for that service.
        """
        init_contents = unit.directory_contents("/etc/init/")
        return {
            service: "{}.override".format(service) in init_contents["files"]
            for service in self.KEYSTONE_SERVICES}

    def _add_services(self):
        super(PauseResume, self)._add_services({"name": "keystone"}, [])

    def _configure_services(self):
        config = {"admin-password": "openstack",
                  "admin-token": "ubuntutesting"}
        super(PauseResume, self)._configure_services({"keystone": config})

    def _run_action(self, unit_id, action, *args):
        command = ["juju", "action", "do", unit_id, action]
        command.extend(args)
        print("Running command: %s\n" % " ".join(command))
        output = subprocess.check_output(command)
        parts = output.strip().split()
        action_id = parts[-1]
        return action_id

    def _wait_on_action(self, action_id):
        command = ["juju", "action", "fetch", action_id]
        while True:
            try:
                output = subprocess.check_output(command)
            except Exception as e:
                print(e)
                return False

            data = yaml.safe_load(output)
            if data["status"] == "completed":
                return True
            elif data["status"] == "failed":
                return False
            time.sleep(2)

    def run(self):
        unit_name = "keystone/0"
        unit = self.d.sentry.unit[unit_name]
        assert self.is_keystone_running(unit), \
            "keystone not running in initial state."
        action_id = self._run_action(unit_name, "pause")
        assert self._wait_on_action(action_id), "Pause action failed."

        assert not self.is_keystone_running(unit), "keystone is still running!"
        assert all(self.get_service_overrides().itervalues()), \
            "Not all override files were created."

        action_id = self._run_action(unit_name, "resume")
        assert self._wait_on_action(action_id), "Resume action failed"
        assert not any(self.get_service_overrides().itervalues()), \
            "Not all override files were removed."
        assert self.is_keystone_running(unit), \
            "keystone not running after resume."


if __name__ == "__main__":
    p = PauseResume()
    p.run()
